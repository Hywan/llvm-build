parameters:
  name: ''
  vmImage: 'macOS-10.14'
  config: RelWithDebInfo
  toolchainScript: source toolchain/macos-clang.sh

jobs:
  - job: ${{parameters.name}}
    pool:
      vmImage: ${{parameters.vmImage}}
    timeoutInMinutes: 120
    steps:
    - checkout: self
      submodules: recursive
      fetchDepth: 1

    # Configure and build a LLVM install.
    - script: |
        ${{parameters.toolchainScript}}
        cd $(Build.ArtifactStagingDirectory)
        mkdir llvm
        cd llvm
        cmake -G Ninja -DCMAKE_BUILD_TYPE=${{parameters.config}} -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/install/llvm -DLLVM_TARGETS_TO_BUILD="X86;AArch64" -DLLVM_INCLUDE_DOCS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_GO_TESTS=OFF -DLLVM_INCLUDE_TOOLS=OFF -DLLVM_INCLUDE_UTILS=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON $(Build.SourcesDirectory)/llvm-project/llvm/
        ninja -v install
      displayName: Build LLVM
      workingDirectory: $(Build.SourcesDirectory)

    # The LLVM install doesn't include PDB files, so manually copy them to the install directory
    - task: CopyFiles@2
      displayName: Copy PDBs
      inputs:
        sourceFolder: $(Build.ArtifactStagingDirectory)/llvm
        contents: '**/*.pdb'
        targetFolder: $(Build.ArtifactStagingDirectory)/install/llvm

    # Build an archive with the LLVM install
    - task: ArchiveFiles@2
      displayName: Archive LLVM install
      inputs:
        rootFolderOrFile: $(Build.ArtifactStagingDirectory)/install/llvm
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/${{parameters.name}}.zip

    # Publish the LLVM install archive as an artifact
    - publish: $(Build.ArtifactStagingDirectory)/${{parameters.name}}.zip
      artifact: ${{parameters.name}}