stages:
  - stage:
    displayName: Build
    jobs:
      # Win64 VS2017
      - template: azure-build-job-template.yml
        parameters:
          name: Win64_VS2017_RelWithDebInfo
          vmImage: 'VS2017-Win2016'
          config: RelWithDebInfo
          toolchainScript: call toolchain/windows-vs2017-x64.bat
      - template: azure-build-job-template.yml
        parameters:
          name: Win64_VS2017_Debug
          vmImage: 'VS2017-Win2016'
          config: Debug
          toolchainScript: call toolchain/windows-vs2017-x64.bat
      - template: azure-build-job-template.yml
        parameters:
          name: Win64_VS2017_Release
          vmImage: 'VS2017-Win2016'
          config: Release
          toolchainScript: call toolchain/windows-vs2017-x64.bat

      # Win64 VS2019
      - template: azure-build-job-template.yml
        parameters:
          name: Win64_VS2019_RelWithDebInfo
          vmImage: 'windows-2019'
          config: RelWithDebInfo
          toolchainScript: call toolchain/windows-vs2019-x64.bat
      - template: azure-build-job-template.yml
        parameters:
          name: Win64_VS2019_Debug
          vmImage: 'windows-2019'
          config: Debug
          toolchainScript: call toolchain/windows-vs2019-x64.bat
      - template: azure-build-job-template.yml
        parameters:
          name: Win64_VS2019_Release
          vmImage: 'windows-2019'
          config: Release
          toolchainScript: call toolchain/windows-vs2019-x64.bat

      # Ubuntu 16.04
      - template: azure-build-job-template.yml
        parameters:
          name: Ubuntu1604_RelWithDebInfo
          vmImage: 'ubuntu-16.04'
          config: RelWithDebInfo
          toolchainScript: source toolchain/ubuntu-gcc.sh
      - template: azure-build-job-template.yml
        parameters:
          name: Ubuntu1604_Debug
          vmImage: 'ubuntu-16.04'
          config: Debug
          toolchainScript: source toolchain/ubuntu-gcc.sh
      - template: azure-build-job-template.yml
        parameters:
          name: Ubuntu1604_Release
          vmImage: 'ubuntu-16.04'
          config: Release
          toolchainScript: source toolchain/ubuntu-gcc.sh

      # MacOS 10.14
      - template: azure-build-job-template.yml
        parameters:
          name: MacOSX14_RelWithDebInfo
          vmImage: 'macOS-10.14'
          config: RelWithDebInfo
          toolchainScript: source toolchain/macos-clang.sh
      - template: azure-build-job-template.yml
        parameters:
          name: MacOSX14_Debug
          vmImage: 'macOS-10.14'
          config: Debug
          toolchainScript: source toolchain/macos-clang.sh
      - template: azure-build-job-template.yml
        parameters:
          name: MacOSX14_Release
          vmImage: 'macOS-10.14'
          config: Release
          toolchainScript: source toolchain/macos-clang.sh


  - stage:
    # Only upload a GitHub release if this is the main branch (implies it's not a pull request).
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Create GitHub release
    jobs:
      - job: UploadGitHubRelease
        pool:
          vmImage: windows-2019
        steps:
        # Download all the artifacts uploaded by the jobs in the Build stage.
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: current
            targetPath: $(Build.ArtifactStagingDirectory)
        # Create a GitHub release containing the artifacts.
        - task: GitHubRelease@0
          inputs:
            gitHubConnection: GitHubPAT
            action: create
            target: $(Build.SourceVersion)
            tagSource: manual
            tag: WAVM-LLVM-$(Build.BuildNumber)
            title: WAVM-LLVM-$(Build.BuildNumber)
            assets: $(Build.ArtifactStagingDirectory)/**/*.zip
            releaseNotesSource: input
            releaseNotes:
            addChangeLog: false