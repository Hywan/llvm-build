parameters:
  baseName: ''
  vmImage: ''
  container: ''
  installToolchainSteps: []
  cmakeArgs: ''

jobs:
  - job: ${{parameters.baseName}}
    pool:
      vmImage: ${{parameters.vmImage}}
    ${{if ne(parameters.container, '')}}:
      container: ${{parameters.container}}
    timeoutInMinutes: 120

    strategy:
      matrix:
        LTO: 
          configName: LTO
          cmakeArgs: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_LTO=Thin
        Release:
          configName: Release
          cmakeArgs: -DCMAKE_BUILD_TYPE=Release
        Checked:
          configName: Checked
          cmakeArgs: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON
        Sanitized:
          configName: Sanitized
          cmakeArgs: >
            -DCMAKE_BUILD_TYPE=Release
            -DLLVM_ENABLE_ASSERTIONS=ON
            -DLLVM_USE_SANITIZE_COVERAGE=ON
            -DLLVM_USE_SANITIZER="Address;Undefined"

    steps:
    - checkout: self
      submodules: recursive

    - ${{parameters.installToolchainSteps}}

    # Configure LLVM
    - template: /azure-pipelines/cmake-configure-step-template.yml
      parameters:
        cmakeArgs: >
          -G Ninja
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_C_FLAGS=-fvisibility=hidden
          -DCMAKE_CXX_FLAGS=-fvisibility=hidden
          ${{parameters.cmakeArgs}}
          $(cmakeArgs)

    # Build LLVM
    - script: ninja -v install
      displayName: Build LLVM
      workingDirectory: $(Build.ArtifactStagingDirectory)/llvm

    # Publish the install as an artifact
    - template: /azure-pipelines/publish-steps-template.yml
      parameters:
        artifactName: ${{parameters.baseName}}_$(configName)